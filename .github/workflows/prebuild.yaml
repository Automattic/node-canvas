# Release procedure:
# 1. On the master branch, update the changelog and stage it in git.
# 2. Run `yarn version --[major|minor|patch]`. (This tags the commit.)
# 3. Push both the commit and tags to GitHub (`git push --tags Automattic` and
#    `git push Automattic HEAD:master`, where "Automattic" is the remote name
#    for git@github.com:Automattic/node-canvas.git).
# 4. Create a draft release manually using the GitHub UI for the new tag.
# 5. Switch to the prebuilds branch.
# 6. Set the `jobs.*.strategy.matrix.node` arrays to the set of Node.js versions
#    to build for.
# 7. Set the `jobs.*.strategy.matrix.canvas_tag` arrays to the set of Canvas
#    tags to build. (Usually this is a single tag, but can be an array when a
#    new version of Node.js is released and older versions of Canvas need to be
#    built.)
# 8. Commit this file and push.
# 9. In the Actions tab, navigate to the "Make Prebuilds" workflow and click
#    "Run workflow". Select the `prebuilds` branch so that that branch's
#    prebuild.yaml file is used.
# 10.Once the builds succeed, promote the draft release to a full release and
#    run npm publish.

# Note that the files in the prebuild/ directory will be used from the commit
# that was used to trigger the prebuild workflow. They will not be from the
# commit/tag that you are building. Because of differences in the provided
# versions of git, this is achieved in a different way on Linux than on Mac and
# Win.
#
# Pay particular attention to changes to binding.gyp on master. That file is not
# used! The ones in prebuild/**/ are.

# Tip: If uploads are inexplicably failing, open the release in GitHub, click
# "edit" and delete any assets that are in purgatory (have a /!\ next to them).

name: Make Prebuilds
on: workflow_dispatch

# UPLOAD_TO can be specified to upload the release assets under a different tag
# name (e.g. for testing). If omitted, the assets are published under the same
# release tag as the canvas version being built.
# env:
#   UPLOAD_TO: "v0.0.1"

# Node 19 requires a recent node-gyp
# Node 10, 11 require 8
# Node 8, 9 require 6.1
# Manually set this file depending on what you're building!!

jobs:
  macOS:
    strategy:
      fail-fast: false
      matrix:
        node: [21]
        canvas_tag: ["m1-testing"] # e.g. "v2.6.1"
        os:
          - runner: macos-12
            arch: x64
          - runner: macos-14 # GitHub's Apple Silicon runner
            arch: arm64
    name: ${{ matrix.canvas_tag}}, Node.js ${{ matrix.node }}, macOS ${{ matrix.os.arch }}
    runs-on: ${{ matrix.os.runner }}
    env:
      CANVAS_VERSION_TO_BUILD: ${{ matrix.canvas_tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ matrix.canvas_tag }}
          # Fetch all commits/all branches so we can checkout the prebuild
          # branch's files
          fetch-depth: 0

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Build
        run: |
          set -Eeuxo pipefail
          git checkout ${{ matrix.canvas_tag }}
          git checkout $GITHUB_SHA -- prebuild/
          npm install -g node-gyp
          npm install --ignore-scripts
          npm install nan
          . prebuild/macOS/preinstall.sh
          cp prebuild/macOS/binding.gyp binding.gyp
          node-gyp rebuild -j 2 --arch=${{ matrix.os.arch }}
          . prebuild/macOS/bundle.sh

      - name: Test binary
        run: |
          brew uninstall --force --ignore-dependencies cairo pango librsvg giflib harfbuzz
          npm test

      - name: Make bundle
        id: make_bundle
        run: . prebuild/tarball.sh

      - name: Upload
        uses: actions/github-script@v2
        with:
          script: |
            const fs = require("fs");
            const assetName = "${{ steps.make_bundle.outputs.asset_name }}";
            const tagName = process.env.UPLOAD_TO || process.env.CANVAS_VERSION_TO_BUILD;
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");

            const releases = await github.repos.listReleases({owner, repo});
            const release = releases.data.find(r => r.tag_name === tagName);
            if (!release)
              throw new Error(`Tag ${tagName} not found. Did you make the GitHub release?`);

            const oldAsset = release.assets.find(a => a.name === assetName);
            if (oldAsset)
              await github.repos.deleteReleaseAsset({owner, repo, asset_id: oldAsset.id});

            // (This is equivalent to actions/upload-release-asset. We're
            // already in a script, so might as well do it here.)
            const r = await github.repos.uploadReleaseAsset({
              url: release.upload_url,
              headers: {
                "content-type": "application/x-gzip",
                "content-length": `${fs.statSync(assetName).size}`
              },
              name: assetName,
              data: fs.readFileSync(assetName)
            });
