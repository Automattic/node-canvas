name: Build
on: [push]

env:
    DEBUG: "napi:*"
    MACOSX_DEPLOYMENT_TARGET: "10.13"

jobs:
    build:
        strategy:
            fail-fast: false
            matrix:
                targets:
                    [
                        "x86_64-apple-darwin",
                        "aarch64-apple-darwin",
                        "x86_64-pc-windows-msvc",
                        "i686-pc-windows-msvc",
                        "aarch64-pc-windows-msvc",
                        "x86_64-unknown-linux-gnu",
                        "aarch64-unknown-linux-gnu",
                        "x86_64-unknown-linux-musl",
                        "aarch64-unknown-linux-musl",
                        "armv7-unknown-linux-gnueabihf",
                        "aarch64-linux-android",
                        "armv7-linux-androideabi",
                    ]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Install
              uses: dtolnay/rust-toolchain@stable
              with:
                  toolchain: stable
                  targets: ${{ matrix.targets }}

            - uses: actions/setup-node@v4
              with:
                  node-version: "18"

            - uses: pnpm/action-setup@v2
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install ziglang
              uses: goto-bus-stop/setup-zig@v1
              with:
                  version: 0.11.0

            - run: cargo install cargo-xwin
            - run: pnpm install
            - run: pnpm run gen-packages
            - run: pnpm run build --target ${{ matrix.targets }}
            - run: pnpm run postbuild

            - uses: actions/upload-artifact@v3
              with:
                  name: bindings-${{ matrix.targets }}
                  path: "*.node"
                  if-no-files-found: error

    test-host:
        strategy:
            fail-fast: false
            matrix:
                settings:
                    - target: x86_64-apple-darwin
                      host: macos-latest
                    - target: x86_64-pc-windows-msvc
                      host: windows-latest
                    - target: i686-pc-windows-msvc
                      host: windows-latest
                node: ["18", "20"]
        runs-on: ${{ matrix.settings.host }}
        needs:
            - build
        steps:
            - uses: actions/checkout@v4

            - uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node }}

            - uses: pnpm/action-setup@v2
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Setup node x86
              if: matrix.settings.target == 'i686-pc-windows-msvc'
              run: pnpm config set cpu "ia32"
              shell: bash

            - name: Install dependencies
              run: pnpm install

            - name: Setup node x86
              uses: actions/setup-node@v4
              if: matrix.settings.target == 'i686-pc-windows-msvc'
              with:
                  node-version: 18
                  cache: pnpm
                  architecture: x86

            - name: Download bindings
              uses: actions/download-artifact@v3
              with:
                  name: bindings-${{ matrix.settings.target }}

            - name: Run tests
              run: pnpm test

    test-docker:
        strategy:
            fail-fast: false
            matrix:
                settings:
                    - target: x86_64-unknown-linux-gnu
                      docker: node:18-slim
                      args: ""
                    - target: aarch64-unknown-linux-gnu
                      docker: node:18-slim
                      args: "--platform linux/arm64"
                    - target: x86_64-unknown-linux-musl
                      docker: node:18-alpine
                      args: ""
                    - target: aarch64-unknown-linux-musl
                      docker: node:18-alpine
                      args: "--platform linux/arm64"
                    - target: armv7-unknown-linux-gnueabihf
                      docker: node:18-bullseye-slim
                      args: "--platform linux/arm/v7"

        runs-on: ubuntu-latest
        needs:
            - build
        steps:
            - uses: actions/checkout@v4

            - uses: actions/setup-node@v4
              with:
                  node-version: 18

            - uses: pnpm/action-setup@v2
              name: Install pnpm
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - uses: actions/cache@v3
              name: Setup pnpm cache
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-store-

            - name: Install dependencies
              run: pnpm install

            - name: Download bindings
              uses: actions/download-artifact@v3
              with:
                  name: bindings-${{ matrix.settings.target }}

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v3
              with:
                  platforms: arm64,arm

            - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

            - name: Run tests
              uses: addnab/docker-run-action@v3
              with:
                  image: ${{ matrix.settings.docker }}
                  options: ${{ matrix.settings.args }} -v ${{ github.workspace }}:/build -w /build
                  run: |
                      set -e
                      pnpm test
