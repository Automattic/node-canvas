/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum LineCap {
  Butt = 0,
  Round = 1,
  Square = 2
}
export const enum FillRule {
  EvenOdd = 0,
  NonZero = 1
}
export const enum PixelFormat {
  Rgba32 = 0,
  Rgb24 = 1,
  A8 = 2,
  Rgb16_565 = 3,
  A1 = 4,
  Rgb30 = 5
}
export const enum LineJoin {
  Bevel = 0,
  Miter = 1,
  Round = 2
}
export const enum AliasingMode {
  Default = 0,
  None = 1,
  Gray = 2,
  Subpixel = 3
}
export const enum GlobalCompositeOperation {
  Clear = 0,
  Copy = 1,
  Destination = 2,
  SourceOver = 3,
  DestinationOver = 4,
  SourceIn = 5,
  DestinationIn = 6,
  SourceOut = 7,
  DestinationOut = 8,
  SourceAtop = 9,
  DestinationAtop = 10,
  Xor = 11,
  Lighter = 12,
  Normal = 13,
  Multiply = 14,
  Screen = 15,
  Overlay = 16,
  Darken = 17,
  Lighten = 18,
  ColorDodge = 19,
  ColorBurn = 20,
  HardLight = 21,
  SoftLight = 22,
  Difference = 23,
  Exclusion = 24,
  Hue = 25,
  Saturation = 26,
  Color = 27,
  Luminosity = 28,
  Saturate = 29
}
export interface JpegConfig {
  quality: number
  progressive: boolean
  chromaSubsampling: boolean
}
export interface PdfConfig {
  title?: string
  author?: string
  subject?: string
  keywords?: string
  creator?: string
  creationDate: number
  modDate?: number
}
export interface PngConfig {
  compressionLevel: number
  filters: PngFilters
  palette?: Array<number>
  backgroundIndex: number
  resolution?: number
}
export function createCanvas(width: number, height: number, kind?: ImageKind | undefined | null): Canvas
export function createImageData(width: number, height?: number | undefined | null, data?: Array<number> | Uint8ClampedArray | Uint16Array | undefined | null): ImageData
export interface DomPoint {
  w?: number
  x?: number
  y?: number
  z?: number
}
export const enum ImageKind {
  Image = 'Image',
  Pdf = 'Pdf',
  Svg = 'Svg'
}
export const enum Quality {
  Fast = 0,
  Good = 1,
  Best = 2,
  Nearest = 3,
  Bilinear = 4
}
export const enum Repetition {
  Repeat = 0,
  RepeatX = 1,
  RepeatY = 2,
  NoRepeat = 3,
  None = 4
}
export const enum TextAlign {
  Center = 0,
  End = 1,
  Left = 2,
  Right = 3,
  Start = 4
}
export const enum TextBaseline {
  Alphabetic = 0,
  Bottom = 1,
  Hanging = 2,
  Ideographic = 3,
  Middle = 4,
  Top = 5
}
export interface TextMetrics {
  /** actualBoundingBoxAscent */
  actualBoundingBoxAscent: number
  /** actualBoundingBoxDescent */
  actualBoundingBoxDescent: number
  /** actualBoundingBoxLeft */
  actualBoundingBoxLeft: number
  /** actualBoundingBoxRight */
  actualBoundingBoxRight: number
  /** fontBoundingBoxAscent */
  fontBoundingBoxAscent: number
  /** fontBoundingBoxDescent */
  fontBoundingBoxDescent: number
  width: number
}
export const enum TextDrawingMode {
  Path = 0,
  Glyph = 1
}
export class Canvas {
  width: number
  height: number
  stride: number
  type: ImageKind
  constructor(width: number, height: number, kind?: ImageKind | undefined | null)
  toBuffer(mime?: string | undefined | null, config?: PngConfig | JpegConfig | PdfConfig | undefined | null): Buffer
  getContext(id: "2d" | "webgl" | "webgl2"): CanvasRenderingContext2d
}
export class CanvasGradient {
  constructor()
  addColorStop(offset: number, color: string): void
}
export type CanvasRenderingContext2d = CanvasRenderingContext2D
export class CanvasRenderingContext2D {
  patternQuality: Quality
  quality: Quality
  textDrawingMode: TextDrawingMode
  antialias: AliasingMode
  lineWidth: number
  lineCap: LineCap
  lineJoin: LineJoin
  miterLimit: number
  lineDashOffset: number
  font: string
  textAlign: TextAlign
  textBaseline: TextBaseline
  shadowBlur: number
  shadowColor: string
  shadowOffsetX: number
  shadowOffsetY: number
  globalAlpha: number
  globalCompositeOperation: GlobalCompositeOperation
  imageSmoothingEnabled: boolean
  fillStyle?: string
  strokeStyle?: string
  constructor(canvas: Canvas)
  get currentTransform(): DomMatrix
  set currentTransform(newVal: DomMatrix)
  get canvas(): Canvas
  set canvas(newVal: Canvas)
  clearRect(x: number, y: number, width: number, height: number): void
  fillRect(x: number, y: number, width: number, height: number): void
  strokeRect(x: number, y: number, width: number, height: number): void
}
export class DomMatrix {
  translate(tx?: number | undefined | null, ty?: number | undefined | null, tz?: number | undefined | null): void
  scale3D(scale?: number | undefined | null, ox?: number | undefined | null, oy?: number | undefined | null, oz?: number | undefined | null): void
  scale(sx?: number | undefined | null, sy?: number | undefined | null, sz?: number | undefined | null, ox?: number | undefined | null, oy?: number | undefined | null, oz?: number | undefined | null): void
  rotateFromVector(x?: number | undefined | null, y?: number | undefined | null): void
  rotate(rx: number, ry?: number | undefined | null, rz?: number | undefined | null): void
  rotateAxisAngle(x: number | undefined | null, y: number | undefined | null, z: number | undefined | null, angle: number): void
  skewX(sx?: number | undefined | null): void
  skewY(sy?: number | undefined | null): void
  flipX(): void
  flipY(): void
  inverse(): void
  setMatrixValue(transformList: Array<number>): void
  
  
  
  
  
  
  
  
  constructor(init?: Array<number> | undefined | null)
  static fromArray(init: Array<number>): DomMatrix
  static fromString(init: string): DomMatrix
  get values(): number[]
  setValues(values: Array<number>): void
  transformPoint(orig: DomPoint): DomPoint
  toFloat32Array(): Float32Array
  toFloat64Array(): Float64Array
  get isIdentity(): boolean
  get is2D(): boolean
  get m11(): number
  set m11(newVal: number)
  get m12(): number
  set m12(newVal: number)
  get m13(): number
  set m13(newVal: number)
  get m14(): number
  set m14(newVal: number)
  get m21(): number
  set m21(newVal: number)
  get m22(): number
  set m22(newVal: number)
  get m23(): number
  set m23(newVal: number)
  get m24(): number
  set m24(newVal: number)
  get m31(): number
  set m31(newVal: number)
  get m32(): number
  set m32(newVal: number)
  get m33(): number
  set m33(newVal: number)
  get m34(): number
  set m34(newVal: number)
  get m41(): number
  set m41(newVal: number)
  get m42(): number
  set m42(newVal: number)
  get m43(): number
  set m43(newVal: number)
  get m44(): number
  set m44(newVal: number)
}
export class ImageData {
  width: number
  height: number
  constructor(width: number, height: number)
  static withData(data: Uint8ClampedArray, width: number, height?: number | undefined | null): ImageData
  get data(): Uint8ClampedArray
  set data(data: Uint8ClampedArray)
}
export class PngFilters { }
export class Image {
  dataMode: ImageMode
  width: number
  height: number
  complete: boolean
  naturalWidth: number
  naturalHeight: number
  get src(): string | Buffer
  set src(val: string | Buffer)
}
export class ImageMode { }

export type DOMMatrix = DomMatrix;
export type DOMPoint = DomPoint;